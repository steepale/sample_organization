#===============================================================================
#
#         FILE: /Users/Alec/Documents/Bioinformatics/MDV_Project/sample_organization/scripts/tissue_samples_main_documentation.txt
#
#        USAGE: for documentation purposes, scripts inside
#
#  DESCRIPTION:  This script serves as a step by step documentation script about tissue sampling, organization, storage, and testing
#                
# REQUIREMENTS:  ---
#        NOTES:  ---
#       AUTHOR:  Alec Steep, steepale@msu.edu
#  AFFILIATION:  Michigan State University (MSU), East Lansing, MI, United States
#				         USDA ARS Avian Disease and Oncology Lab (ADOL), East Lansing, MI, United States
#				         Technical University of Munich (TUM), Weihenstephan, Germany
#      VERSION:  1.0
#      CREATED:  2017.05.05
#     REVISION:  
#===============================================================================

# Permanent PROJECT DIRECTORY (Alec's Macbook)
cd /Users/Alec/Documents/Bioinformatics/MDV_Project/sample_organization

# Tissue samples were collected in the Summer of 2014
# Sample collection data was recorded on necropsy note cards, PDFs of each card can be found in
# ./data/necropsy_cards
# Tissue sampling, organization, storage, and testing were recorded on excel files. These files are adequate
# but I would like to reorganize the data into tab delimited test files for organization purposes and data parsing
# Location of excel file: ./data/Tumor_Sampling_12_02_16.xlsx

# Make appropriate directories
mkdir -p ./{data,scripts,analysis}

# Create a new data scheme for tissue sampling
python ./scripts/reformat_tissue_organization.py \
./data/tissue_collection_inadequate_format.txt \
./data/tissue_collection_and_sampling_summer_2014.txt

# ./scripts/reformat_tissue_organization.py
###########################################################
import sys
import re

# infile
infile = sys.argv[1]

# outfile
outfile = open(sys.argv[2], 'w')

bioreps_set = ['017834-2', '017842-2', '017901-2', '017911-1']

# Iterate through the infile, collect stats, and reorganize data
for line in open(infile):
	# Write output header
	if line[0] == '#':
		outfile.write('##SAMPLE_ID'+'\t'+'Collected tissue sample identification'+'\n')
		outfile.write('##TUBE_LABEL'+'\t'+'How sample was labeled on storage tube'+'\n')
		outfile.write('##GERM_TUM'+'\t'+'Whether sample is characterized as germline or somatic'+'\n')
		outfile.write('##TISSUE'+'\t'+'Type of collected tissue'+'\n')
		outfile.write('##BIRD_ID'+'\t'+'Identification of bird, from which tissue was collected'+'\n')
		outfile.write('##PEN_ID'+'\t'+'Identification of housing unit from which bird resided during experiment'+'\n')
		outfile.write('##DOD'+'\t'+'Date Of Death of bird'+'\n')
		outfile.write('##MORT_TYPE'+'\t'+'Mortality type, whether bird died from Mareks Disease or was euthanized'+'\n')
		outfile.write('##SEX'+'\t'+'The sex of the bird'+'\n')
		outfile.write('##TUMOR_NUM'+'\t'+'Number of COLLECTED tumors from bird'+'\n')
		outfile.write('##STORAGE'+'\t'+'The storage strategy of tissue based on potential for biological sampling; DNA, RNA, cytogenetics'+'\n')
		outfile.write('##TUMOR_SCORE'+'\t'+'Grade of tumor; Scale of 1-3, 3 represents most homologous largest tumor in appearence, interpretation by eye'+'\n')
		outfile.write('##COHORT'+'\t'+'Experimental cohort'+'\n')
		outfile.write('#SAMPLE_ID'+'\t'+'TUBE_LABEL'+'\t'+'GERM_TUM'+'\t'+'TISSUE'+'\t'+'BIRD_ID'+'\t'+'PEN_ID'+'\t'+'DOD'+'\t'+'MORT_TYPE'+'\t'+'SEX'+'\t'+'TUMOR_NUM'+'\t'+'STORAGE'+'\t'+'TUMOR_SCORE'+'\t'+'COHORT'+'\n')
	# collect stats if not header
	elif line[0] != '#':
		make_dup = 'no'
		line = line.rstrip()
		col = line.split('\t')
		bird_id = col[0]
		pen_id = col[1]
		dod = col[2]
		mort_type = col[3]
		sex = col[4].lower()
		tumor_pres = col[5]
		c1 = col[6]
		c1_dna = col[7]
		c1_rna = col[8]
		t1 = col[9]
		t1_dna = col[10]
		t1_rna = col[11]
		t1_cyto = col[12]
		t1_score = col[13]
		t2 = col[14]
		t2_dna = col[15]
		t2_rna = col[16]
		t2_cyto = col[17]
		t2_score = col[18]
		t3 = col[19]
		t3_dna = col[20]
		t3_rna = col[21]
		t3_cyto = col[22]
		t3_score = col[23]
		t4 = col[24]
		t4_dna = col[25]
		t4_rna = col[26]
		t4_cyto = col[27]
		t4_score = col[28]
		t5 = col[29]
		t5_dna = col[30]
		t5_rna = col[31]
		t5_cyto = col[32]
		t5_score = col[33]
		t6 = col[34]
		t6_dna = col[35]
		t6_rna = col[36]
		t6_cyto = col[37]
		t6_score = col[38]
		t7 = col[39]
		t7_dna = col[40]
		t7_rna = col[41]
		t7_cyto = col[42]
		t7_score = col[43]
		cohort = 'summer_2014'
		# Create a list of tumor calls
		t_list = [t1, t2, t3, t4, t5, t6, t7]
		#Create a list of tumors
		tumors = []
		for t in t_list:
			if t != 'NA':
				tumors.append(t)
		# Create a list of tumor dna sampling
		tum_dna = [t1_dna, t2_dna, t3_dna, t4_dna, t5_dna, t6_dna, t7_dna]
		# Create a list of tumor rna sampling
		tum_rna = [t1_rna, t2_rna, t3_rna, t4_rna, t5_rna, t6_rna, t7_rna]
		# Create a list of tumor cyto sampling
		tum_cyto = [t1_cyto, t2_cyto, t3_cyto, t4_cyto, t5_cyto, t6_cyto, t7_cyto]
		# Create a list of tumor scores
		tum_score = [t1_score, t2_score, t3_score, t4_score, t5_score, t6_score, t7_score]
		# Outfile fields
		tumor_num = len(tumors)
		# Iterate through controls and write them to output file
		for c_i, control in enumerate([c1]):
			sample_id = bird_id + '-' + str(c_i)
			# Filter out samples with no controls
			if control != 'NA':	
				# Tube label
				if re.search(';', control):
					label_end = control.split(';')[1]
					tissue = control.split(';')[0].lower()
					tube_label = bird_id + '-' + label_end
				else:
					label_end = ''
					tissue = control.lower()
					tube_label = bird_id
				germ_tum = 'germline'
				# Biological sampling strategy
				bio_data = []
				if c1_dna == 'X':
					bio_data.append('dna')
				if c1_rna == 'X':
					bio_data.append('rna')
				bio_data = ';'.join(map(str,bio_data))
				tumor_score = 'na'
				# Mortality type
				if mort_type == 'K':
					mort_type = 'euthanized'
				elif mort_type == 'D':
					mort_type = 'disease'
				# Write germline outputs
				outfile.write(sample_id+'\t'+tube_label+'\t'+germ_tum+'\t'+tissue+'\t'+bird_id+'\t'+pen_id+'\t'+dod+'\t'+mort_type+'\t'+sex+'\t'+str(tumor_num)+'\t'+bio_data+'\t'+tumor_score+'\t'+cohort+'\n')
		# Iterate through tumors and write them to output file
		for t_i, tumor in enumerate(t_list):
			make_dup = 'no'
			sample_id = bird_id + '-' + str(t_i + 1)
			if sample_id in bioreps_set:
				make_dup = 'yes'
			# Filter out samples with no controls
			if tumor != 'NA':	
				# Tube label
				if re.search(';', tumor):
					label_end = tumor.split(';')[1]
					tissue = tumor.split(';')[0].lower()
					tube_label = bird_id + '-' + label_end
				else:
					label_end = str(t_i + 1)
					tissue = tumor.lower()
					tube_label = bird_id + '-' + label_end
				germ_tum = 'tumor'
				# Biological sampling strategy
				bio_data = {}
				for dna_i, t_dna in enumerate(tum_dna): 
					if t_dna == 'X':
						if dna_i in bio_data.keys():
							bio_data[dna_i].append('dna')
						elif dna_i not in bio_data.keys():
							bio_data[dna_i] = ['dna']
				for rna_i, t_rna in enumerate(tum_rna): 
					if t_rna == 'X':
						if rna_i in bio_data.keys():
							bio_data[rna_i].append('rna')
						elif rna_i not in bio_data.keys():
							bio_data[rna_i] = ['rna']
				for cyto_i, t_cyto in enumerate(tum_cyto): 
					if t_cyto == 'X':
						if cyto_i in bio_data.keys():
							bio_data[cyto_i].append('cyto')
						elif cyto_i not in bio_data.keys():
							bio_data[cyto_i] = ['cyto']
				# Extract the sampling info from the bio_data dictionary based on tumor sample
				if t_i in bio_data.keys():
					bio_data = ';'.join(map(str,bio_data[t_i]))
				else:
					bio_data = 'na'
				# Create dictionary for tumor scores
				score_dic = {}
				for score_i, t_score in enumerate(tum_score):
					if t_score != 'NA':
						if score_i in score_dic.keys():
							score_dic[score_i].append(t_score)
						elif score_i not in score_dic.keys():
							score_dic[score_i] = t_score
				if t_i in score_dic.keys():
					tumor_score = score_dic[t_i]
				else:
					tumor_score = 'na'
				# Mortality type
				if mort_type == 'K':
					mort_type = 'euthanized'
				elif mort_type == 'D':
					mort_type = 'disease'
				# Write germline outputs
				if make_dup == 'yes':
					outfile.write(sample_id+'\t'+tube_label+'\t'+germ_tum+'\t'+tissue+'\t'+bird_id+'\t'+pen_id+'\t'+dod+'\t'+mort_type+'\t'+sex+'\t'+str(tumor_num)+'\t'+bio_data+'\t'+tumor_score+'\t'+cohort+'\n')
					outfile.write(sample_id+'_2'+'\t'+tube_label+'_2'+'\t'+germ_tum+'\t'+tissue+'\t'+bird_id+'\t'+pen_id+'\t'+dod+'\t'+mort_type+'\t'+sex+'\t'+str(tumor_num)+'\t'+bio_data+'\t'+tumor_score+'\t'+cohort+'\n')
				elif make_dup == 'no':
					outfile.write(sample_id+'\t'+tube_label+'\t'+germ_tum+'\t'+tissue+'\t'+bird_id+'\t'+pen_id+'\t'+dod+'\t'+mort_type+'\t'+sex+'\t'+str(tumor_num)+'\t'+bio_data+'\t'+tumor_score+'\t'+cohort+'\n')
# Close outfile
outfile.close()
#################################################

# Laurie sent me data on collected samples from the second hatch (May 5th, 2017; Go Puebla, sorry France...). Reformat these data.
# After minor adjustments file is saved as tab delimied text file: ./data/tissue_collection_and_sampling_summer_2017_inadequate_format.txt

# Create a new data scheme for tissue sampling
python ./scripts/reformat_tissue_organization_summer_2017.py \
./data/tissue_collection_and_sampling_summer_2017_inadequate_format.txt \
./data/tissue_collection_and_sampling_summer_2017.txt

# ./scripts/reformat_tissue_organization_summer_2017.py
###########################################################
import sys
import re

# infile
infile = sys.argv[1]

# outfile
outfile = open(sys.argv[2], 'w')

# Iterate through the infile, collect stats, and reorganize data
for line in open(infile):
	# Write output header
	if line[0] == '#':
		outfile.write('##SAMPLE_ID'+'\t'+'Collected tissue sample identification'+'\n')
		outfile.write('##TUBE_LABEL'+'\t'+'How sample was labeled on storage tube'+'\n')
		outfile.write('##GERM_TUM'+'\t'+'Whether sample is characterized as germline or somatic'+'\n')
		outfile.write('##TISSUE'+'\t'+'Type of collected tissue'+'\n')
		outfile.write('##BIRD_ID'+'\t'+'Identification of bird, from which tissue was collected'+'\n')
		outfile.write('##PEN_ID'+'\t'+'Identification of housing unit from which bird resided during experiment'+'\n')
		outfile.write('##DOD'+'\t'+'Date Of Death of bird'+'\n')
		outfile.write('##MORT_TYPE'+'\t'+'Mortality type, whether bird died from Mareks Disease or was euthanized'+'\n')
		outfile.write('##SEX'+'\t'+'The sex of the bird'+'\n')
		outfile.write('##TUMOR_NUM'+'\t'+'Number of COLLECTED tumors from bird'+'\n')
		outfile.write('##STORAGE'+'\t'+'The storage strategy of tissue based on potential for biological sampling; DNA, RNA, cytogenetics'+'\n')
		outfile.write('##TUMOR_SCORE'+'\t'+'Grade of tumor; Scale of 1-3, 3 represents most homologous largest tumor in appearence, interpretation by eye'+'\n')
		outfile.write('##COHORT'+'\t'+'Experimental cohort'+'\n')	
		outfile.write('#SAMPLE_ID'+'\t'+'TUBE_LABEL'+'\t'+'GERM_TUM'+'\t'+'TISSUE'+'\t'+'BIRD_ID'+'\t'+'PEN_ID'+'\t'+'DOD'+'\t'+'MORT_TYPE'+'\t'+'SEX'+'\t'+'TUMOR_NUM'+'\t'+'STORAGE'+'\t'+'TUMOR_SCORE'+'\t'+'COHORT'+'\n')
	# collect stats if not header
	elif line[0] != '#':
		line = line.rstrip()
		col = line.split('\t')
		in_sample = col[0]
		dod = col[1]
		in_sex = col[2]
		if in_sex == 'F':
			sex = 'female'
		elif in_sex == 'M':
			sex = 'male'
		in_tumor = col[3]
		in_tumor_score = col[4]
		in_normal = col[5]
		in_oct = col[6]
		in_notes = col[7]
		bird_id = 'S'+ in_sample.zfill(3)
		tube_label = 'na'
		pen_id = 'na'
		mort_type = 'euthanized'
		cohort = 'summer_2017'
		# Create lists of all delimited fields
		tumor_list = in_tumor.split(';')
		tumor_score_list = in_tumor_score.split(';')
		normal_list = in_normal.split(';')
		# continue variable creation
		tumor_num = str(len(tumor_list) + 1)
		# Iterate through the germline samples
		for g_i, g in enumerate(normal_list):
			sample_id = bird_id + '-N_' + str(g_i)
			germ_tum = 'germline'
			tissue = g.lower()
			sampling_list = ['liquid_nitrogen']
			if in_oct != 'NA' and re.search(g, in_oct) and len(sampling_list) != 2:
				sampling_list.append('immunohistochem')
			tumor_score = 'na'
			sampling = ';'.join(map(str,sampling_list))
			# Write the data to outfile
			outfile.write(sample_id+'\t'+tube_label+'\t'+germ_tum+'\t'+tissue+'\t'+bird_id+'\t'+pen_id+'\t'+dod+'\t'+mort_type+'\t'+sex+'\t'+tumor_num+'\t'+sampling+'\t'+tumor_score+'\t'+cohort+'\n')
		# Iterate through the tumor samples
		for t_i, t in enumerate(tumor_list):
			sample_id = bird_id + '-T_' + str(t_i + 1)
			germ_tum = 'tumor'
			tissue = t.lower()
			sampling_list = ['liquid_nitrogen']
			if in_oct != 'NA' and re.search(t, in_oct) and len(sampling_list) != 2:
				sampling_list.append('immunohistochem')
			if tumor_score_list[t_i] == 'NA':
				tumor_score_list[t_i] == 'na'
			else:
				tumor_score = tumor_score_list[t_i]
			sampling = ';'.join(map(str,sampling_list))
			# Write the data to outfile
			outfile.write(sample_id+'\t'+tube_label+'\t'+germ_tum+'\t'+tissue+'\t'+bird_id+'\t'+pen_id+'\t'+dod+'\t'+mort_type+'\t'+sex+'\t'+tumor_num+'\t'+sampling+'\t'+tumor_score+'\t'+cohort+'\n')
# Close outfile
outfile.close()
#################################

# Combine the files to prioritize which samples will undergo analysis
(grep "^#" ./data/tissue_collection_and_sampling_summer_2014.txt; \
grep -v "^#" ./data/tissue_collection_and_sampling_summer_2014.txt; \
grep -v "^#" ./data/tissue_collection_and_sampling_summer_2017.txt) > \
./data/tissue_collection_and_sampling_2014_2017.int

# Prioritize samples based on these filters:
# filter_1: All samples that underwent DNA-sequencing from Summer 2014 cohort (plus matching germlines)
# filter_2: All samples that underwent RNA-sequencing from Summer 2014 cohort 
# filter_3: Gonadal tumors with tumor score greater than or equal to 2 
# filter_4: The tumors from birds that possess multiple high quality tumors 
# filter_5: Tumors that have a tumor score of 3 regardless of tissue 
# filter_6: Tumors that have a tumor score of 2 regardless of tissue 
# filter_7: Remaining gonadal tumor samples
# filter_8: Remaining tumor samples
# filter_9: Remaining germline samples  

python ./scripts/prioritize_tissue_samples_for_sampling.py \
./data/tissue_collection_and_sampling_2014_2017.int \
./data/tissue_collection_and_sampling_2014_2017_unsorted.txt

# ./scripts/prioritize_tissue_samples_for_sampling.py
##################################
import sys
import re

# infile
infile = sys.argv[1]

# outfile
outfile = open(sys.argv[2], 'w')

# Reference files
dnaseq_list_file = '/Users/Alec/Documents/Bioinformatics/MDV_Project/databases/samples/all_samples_dnaseq_2014_017NNN-N.txt'
rnaseq_list_file = '/Users/Alec/Documents/Bioinformatics/MDV_Project/databases/samples/all_samples_rnaseq_2014_017NNN-N.txt'
microarray_list_file = '/Users/Alec/Documents/Bioinformatics/MDV_Project/databases/samples/all_samples_microarrays_2014_017NNN-N.txt'
cyto_list_file = '/Users/Alec/Documents/Bioinformatics/MDV_Project/databases/samples/all_samples_cytogenetics_2014_017NNN-N.txt'
immunohisto_list_file = '/Users/Alec/Documents/Bioinformatics/MDV_Project/databases/samples/all_samples_immunohistochem_2017.txt'

# Create a dictionary for birds with mutliple high quality tumors
birds2tumor_scores = {}
# Iterate through file to contruct dictionary
for line in open(infile):
	if line[0] != '#':
		line = line.rstrip()
		col = line.split('\t')
		bird_id = col[4]
		tumor_score = col[11]
		if bird_id not in birds2tumor_scores.keys():
			birds2tumor_scores[bird_id] = [tumor_score]
		else:
			birds2tumor_scores[bird_id].append(tumor_score)

# Read samples into set that have undergone each specific molecular test
# make all sets into dictionary
test_dic = {}
for test_file in [dnaseq_list_file, rnaseq_list_file, microarray_list_file, cyto_list_file, immunohisto_list_file]:
	for line in open(test_file):
		if line[0] != '#':
			line = line.rstrip()
			sample = line
			for test in ['dnaseq', 'rnaseq', 'microarrays', 'cytogenetics', 'immunohistochem']:
				if re.search(test, test_file):
					if test not in test_dic.keys():
						test_dic[test] = set()
						test_dic[test].add(sample)
					else:
						test_dic[test].add(sample)

# Iterate through infile and collect stats for filters
for line in open(infile):
	# Write a header
	if line [0] == '#' and line[1] != '#':
		outfile.write('##SAMPLE_ID'+'\t'+'Collected tissue sample identification'+'\n')
		outfile.write('##TUBE_LABEL'+'\t'+'How sample was labeled on storage tube'+'\n')
		outfile.write('##SEX'+'\t'+'The sex of the bird'+'\n')
		outfile.write('##GERM_TUM'+'\t'+'Whether sample is characterized as germline or somatic'+'\n')
		outfile.write('##TISSUE'+'\t'+'Type of collected tissue'+'\n')
		outfile.write('##TUMOR_NUM'+'\t'+'Number of COLLECTED tumors from bird'+'\n')
		outfile.write('##TUMOR_SCORE'+'\t'+'Grade of tumor; Scale of 1-3, 3 represents most homologous largest tumor in appearence, interpretation by eye'+'\n')
		outfile.write('##COHORT'+'\t'+'Experimental cohort'+'\n')
		outfile.write('##STORAGE'+'\t'+'The storage strategy of tissue based on potential for biological sampling; DNA, RNA, cytogenetics, liquid_nitrogen, immunohistochem'+'\n')
		outfile.write('##SAMPLING'+'\t'+'The actual biological tests that have been performed from sample; dna_seq, affy_array, rna_seq, cytogenetics, immunohistochem'+'\n')
		outfile.write('##FILTER'+'\t'+'Justification for priority score'+'\n')
		outfile.write('###FILTERS:'+'\n')
		outfile.write('###filter_1:'+'\t'+'All samples that underwent DNA-sequencing from Summer 2014 cohort (plus matching germlines)'+'\n')
		outfile.write('###filter_2:'+'\t'+'All samples that underwent RNA-sequencing from Summer 2014 cohort'+'\n')
		outfile.write('###filter_3:'+'\t'+'Gonadal tumors with tumor score greater than or equal to 2'+'\n')
		outfile.write('###filter_4:'+'\t'+'The tumors from birds that possess multiple high quality tumors'+'\n')
		outfile.write('###filter_5:'+'\t'+'Tumors that have a tumor score of 3 regardless of tissue'+'\n')
		outfile.write('###filter_6:'+'\t'+'Tumors that have a tumor score of 2 regardless of tissue'+'\n')
		outfile.write('###filter_7:'+'\t'+'Remaining gonadal tumor samples'+'\n')
		outfile.write('###filter_8:'+'\t'+'Remaining tumor samples'+'\n')
		outfile.write('###filter_9:'+'\t'+'Remaining germline samples'+'\n')
		outfile.write('#SAMPLE_ID'+'\t'+'TUBE_LABEL'+'\t'+'SEX'+'\t'+'GERM_TUM'+'\t'+'TISSUE'+'\t'+'TUMOR_NUM'+'\t'+'TUMOR_SCORE'+'\t'+'COHORT'+'\t'+'STORAGE'+'\t'+'SAMPLING'+'\t'+'FILTER'+'\n')
	elif line[0] != '#':
		line = line.rstrip()
		col = line.split('\t')
		sample_id = col[0]
		tube_label = col[1]
		germ_tum = col[2]
		tissue = col[3]
		bird_id = col[4]
		pen_id = col[5]
		dod = col[6]
		mort_type = col[7]
		sex = col[8]
		tumor_num = col[9]
		tumor_score = col[11]
		cohort = col[12]
		# Adjust storage
		storage = set(col[10].split(';'))
		if 'immunohistochem' in storage:
			storage.discard('immunohistochem')
		if len(storage) > 0:
			storage = ';'.join(map(str,storage))
			if storage == '':
				storage = 'na'
		# Create a set for sampling
		sampling = set()
		for test in ['dnaseq', 'rnaseq', 'microarrays', 'cytogenetics', 'immunohistochem']:
			if sample_id in test_dic[test]:
				sampling.add(test)
		if len(sampling) > 0:
			sampling = ';'.join(map(str,sampling))
		else:
			sampling = 'na'
		# Create an if then for tumor score exception
		if tumor_score == 'na':
			tumor_score_com = '0'
		else:
			tumor_score_com = tumor_score
		# Create a field for birds with multiple high quality tumors
		score_sheet = []
		if len(birds2tumor_scores[bird_id]) >= 3:
			for score in birds2tumor_scores[bird_id]:
				if score != 'na':
					if int(score) >= 2:
						score_sheet.append(score)
		if len(score_sheet) >= 3:
			heavy_hit_bird = 'yes'
		else:
			heavy_hit_bird = 'no'
		# Annotate with location



		# Create conditions for filters
		# Samples already output
		output_set = set()
		# filter_1: All samples that underwent DNA-sequencing from Summer 2014 cohort (plus matching germlines)
		if 'dnaseq' in sampling.split(';') and sample_id not in output_set:
			output_set.add(sample_id)
			filter_status = '1'
		# filter_2: All samples that underwent RNA-sequencing from Summer 2014 cohort 
		elif 'rnaseq' in sampling.split(';') and germ_tum != 'germline' and sample_id not in output_set:
			output_set.add(sample_id)
			filter_status = '2'
		# filter_3: Gonadal tumors with tumor score greater than or equal to 2 
		elif tissue == 'gonad' and germ_tum != 'germline' and int(tumor_score_com) >= 2 and sample_id not in output_set:
			output_set.add(sample_id)
			filter_status = '3'
		# filter_4: The tumors from birds that possess multiple high quality tumors 
		elif heavy_hit_bird == 'yes' and germ_tum != 'germline' and sample_id not in output_set:
			output_set.add(sample_id)
			filter_status = '4'
		# filter_5: Tumors that have a tumor score of 3 regardless of tissue 
		elif tumor_score == '3' and germ_tum != 'germline' and sample_id not in output_set:
			output_set.add(sample_id)
			filter_status = '5'
		# filter_6: Tumors that have a tumor score of 2 regardless of tissue 
		elif tumor_score == '2' and germ_tum != 'germline' and sample_id not in output_set:
			output_set.add(sample_id)
			filter_status = '6'
		# filter_7: Remaining gonadal tumors 
		elif tissue == 'gonad' and germ_tum != 'germline' and sample_id not in output_set:
			output_set.add(sample_id)
			filter_status = '7'	
		# filter_8: Remaining tumors samples 
		elif germ_tum != 'germline' and sample_id not in output_set:
			output_set.add(sample_id)
			filter_status = '8'
		# filter_9: Remaining samples 
		elif sample_id not in output_set:
			output_set.add(sample_id)
			filter_status = '9'
		# Write to outfile
		outfile.write(sample_id+'\t'+tube_label+'\t'+sex+'\t'+germ_tum+'\t'+tissue+'\t'+tumor_num+'\t'+tumor_score+'\t'+cohort+'\t'+storage+'\t'+sampling+'\t'+filter_status+'\n')
#Close outfile
outfile.close()
##################################

# Manually add the rnaseq control samples
vi ./data/tissue_collection_and_sampling_2014_2017_unsorted.txt

# Change the word germline to normal
sed -i -- 's/Germline/Normal/g' ./data/tissue_collection_and_sampling_2014_2017_unsorted.txt
sed -i -- 's/germline/normal/g' ./data/tissue_collection_and_sampling_2014_2017_unsorted.txt
sed -i -- 's/GERM/NORM/g' ./data/tissue_collection_and_sampling_2014_2017_unsorted.txt

# Sort the samples based on filter and priority
(grep "^#" ./data/tissue_collection_and_sampling_2014_2017_unsorted.txt; \
grep -v "^#" ./data/tissue_collection_and_sampling_2014_2017_unsorted.txt | sort -k11,11n) > \
./data/tissue_collection_and_sampling_2014_2017.txt

# Remove the intermediate file
rm ./data/tissue_collection_and_sampling_2014_2017.int

# Annotate these samples with storage location

# Create matrixes of stored samples

















